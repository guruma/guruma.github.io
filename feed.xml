<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://guruma.github.io/' rel='self' type='application/rss+xml'/>
<title>
Computat ergo est
</title>
<link>
http://guruma.github.io/
</link>
<description>
guruma's Blog
</description>
<lastBuildDate>
Wed, 20 Sep 2017 15:43:06 +0900
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://guruma.github.io/posts/2017-09-20-ClojureScript-Macro/
</guid>
<link>
http://guruma.github.io/posts/2017-09-20-ClojureScript-Macro/
</link>
<title>
클로저스트립트에서 매크로 작성시 주의점
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;클로저스크립트(ClojureScript) 컴파일러는 cljs.jar 파일로 배포되며 JVM 상에서 실행되면서, .cljs 파일을 컴파일해서, 브라우저나 Node.js에서 실행할 .js 파일을 만드는 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%81%AC%EB%A1%9C%EC%8A%A4_%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC&quot;&gt;크로스 컴파일러&lt;/a&gt;(Cross Compiler)입니다. 컴파일이 JVM상에서 이루어지기 때문에, 컴파일시에 확장되어야 하는 매크로는 .clj 파일로 작성되어야 합니다. 하지만 크로스 컴파일러라는 클로저스크립트 컴파일러의 이러한 특성으로 인해 매크로 작성시 클로저(Clojure)에 비해 주의할 점이 있습니다. 특히 매크로 도우미(Helper)함수의 작성과 관련해서 주의해야 하는 점들이 있는데, 이러한 점들이 .cljc 파일에 이르러서는 숙련된 클로저 프로그래머조차 가끔 이러한 주의점을 놓치고 실수를 하기도 합니다. 사실 이러한 점은 원리를 알면 당연한 것이 되어서 쉽게 피할 수 있는 문제이기 때문에 이 글에서 차근차근 알아보도록 하겠습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
이 글에서는 컴파일러의 특성을 알아보는 것이 목적이므로 Leiningen보다는  clojure.jar와 cljs.jar를 통해서 Clojure/ClojureScript 컴파일러를 직접 사용합니다.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_클로저의_매크로_작성_방식&quot;&gt;클로저의 매크로 작성 방식&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;보통 클로저(Clojure)에서는 다음과 같이 매크로를 작성합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;macro.clj&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns macro)

(defmacro log [x]
  `(println &quot;[log: ]&quot; ~x))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;core.clj&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns core
  (:require [macro :refer [log]]))

(log &quot;hello, world&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;macro.clj에서 &lt;code&gt;log&lt;/code&gt; 매크로를 정의합니다. 간단하게 로그를 프린트하는 형식(form)을 리턴합니다. 그리고 core.clj에서 macro.clj를 로드(require)하고 &lt;code&gt;log&lt;/code&gt; 매크로를 사용하여 &lt;code&gt;hello world&lt;/code&gt; 를 프린트합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;코드를 실행하기 위해 다음과 같이 macro.clj와 core.clj를 만들고, 위의 소스와 같은 내용으로 각각 코드를 작성합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ mkdir test; cd test
$ touch macro.clj core.clj&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음 명령으로 clojure.jar를 다운로드합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ curl -o clojure.jar http://central.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음 명령으로 직접 소스를 컴파일하고 실행해 봅니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ java -cp clojure.jar:. clojure.main core.clj
[log: ] hello, world&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;java를 실행하면서 클래스패스로 clojure.jar와 현재 디렉토리를 주었습니다. clojure.main 함수를 실행하면서 core.clj 을 인자로 넘겼습니다. core.clj 파일일 컴파일되고 실행되어 명령창에 로그가 프린트되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;여기서 눈여겨 볼 것은 사실 당연한 것이지만 clojure.jar의 컴파일러도 JVM에서 실행되었고, 컴파일된 core.clj도 같은 JVM 상에서 실행되고 있다는 사실입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_매크로_도우미_함수&quot;&gt;매크로 도우미 함수&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;보통 매크로를 작성하다 보면 매크로에서 자체적으로 사용하는 도우미(Helper) 함수들을 만들어 사용하게 됩니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위에서 작성한 &lt;code&gt;log&lt;/code&gt; 매크로에 로그의 시각을 프린트하는 기능을 넣기 위해 &lt;code&gt;now&lt;/code&gt; 도우미 함수를 추가합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;macro.clj&lt;/code&gt; 파일을 다음과 같이 수정합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;macro.clj&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns macro)

(defn now [] ; &amp;lt;== 도우미 함수
  (System/currentTimeMillis))

(defmacro log [x]
  `(println &quot;[log&quot; (now) &quot;]&quot; ~x))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위에서 했던 것과 같이 컴파일하고 실행해보고 확인합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ java -cp clojure.jar:. clojure.main core.clj
[log 1504281655322 ]:  hello, world&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;로그에 시각이 프린트되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;now&lt;/code&gt; 함수는 정확하게 &lt;code&gt;log&lt;/code&gt; 매크로가 실행되는 런타임에 실행되어 해당 시각을 나타내주고 있습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_클로저스크립트의_매크로_작성_방식&quot;&gt;클로저스크립트의 매크로 작성 방식&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;클로저스크립트에서 매크로 작성하는 방식도 클로저와 비슷합니다. 일단 매크로는 .cljs가 아닌 .clj파일에서 정의되어야 한다는 점에서.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;그렇다면 위에서 작성한 매크로는 .clj로 작성했으니 당연히 ClojureScript에서도 사용할 수 있겠죠?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음과 같이 &lt;code&gt;core.cljs&lt;/code&gt; 파일을 작성합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;core.cljs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns core
  (:require-macros [macro :refer [log]]))

(enable-console-print!)

(log &quot;hello, world&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ClojureScript에서는 매크로 파일(.clj)을 로딩하기 위해서는 `require-macros`를 사용합니다. `enable-console-print`는 `println`함수가 JS-VM상의 console에 프린트할 수 있도록 합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음과 같이 core.cljs 파일을 만들고, 위와 소스와 같은 내용으로 코드를 작성합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ touch core.cljs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_클로저스크립트_코드_컴파일하기&quot;&gt;클로저스크립트 코드 컴파일하기&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ClojureScript 파일을 컴파일하기 위해서는 컴파일러의 build-api를 사용해야 합니다. 다음은 build-api를 사용하는 build.clj 파일입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.clj&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(require 'cljs.build.api')

(cljs.build.api/build &quot;.&quot;
  {:main 'core'
   :output-to &quot;out/main.js&quot;})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;cljs.build.api`를 로딩하고, `build&lt;/code&gt; 함수를 사용합니다. &lt;code&gt;build&lt;/code&gt; 함수는 2개의 인자를 받습니다. 첫 인자는 컴파일할 소스 디렉토리이고, 두번째 인자는 컴파일러 옵션입니다. 옵션은 출력 파일을 가리키는 &lt;code&gt;:output-to`와 주 이름공간을 가리키는 `:main&lt;/code&gt; 만 주어졌습니다. `:output-to`는 컴파일한 결과인 JS 코드를 out/main.js 출력 파일에 쓰라는 설정입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음과 같이 cljs.jar를 다운로드받습니다. 이 파일은 클로저스크립트를 컴파일하기 위한 build-api를 담고 있습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ curl -LOk https://github.com/clojure/clojurescript/releases/download/r1.9.908/cljs.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음과 같이 cljs.jar를 이용하여 build.clj를 실행시켜 core.cljs를 컴파일합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ java -cp cljs.jar:. clojure.main build.clj
WARNING: Use of undeclared Var macro/now at line 6 ./core.cljs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;클로저 컴파일러를 실행하던 것과 다른 것은 클패스패스에 clojure.jar 대신 cljs.jar를 주고, 컴파일을 구동하기 위해 build.clj 파일을 주었다는 것입니다. 그리고 컴파일만 한다는 것입니다. 실행할 플랫폼은 JVM이 아니라 JS-VM입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_클로저스크립트의_매크로_도우미_함수&quot;&gt;클로저스크립트의 매크로 도우미 함수&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;그런데 경고가 나옵니다. &lt;code&gt;macro/now`가 선언되어 있지 않다는 경고입니다. 당연합니다. `now`는 .clj 파일에 정의된 매크로 도우미 함수라서, 컴파일러는 매크로 확장시에는 `now`함수를 볼 수 있지만, 매크로 확장의 결과를 사용할 때에는 `now&lt;/code&gt; 함수를 볼 수가 없습니다. .clj에서 정의된 함수인 `now`는 JVM상에서 실행되는 것입니다. JS-VM상에서 구동하는 .cljs의 코드들의 런타임시에는 `now`와 같은 .clj의 함수들을 당연히 사용할 수 없습니다. 단지 .clj 파일의 매크로만 사용할 수 있는데, 왜냐하면 매크로의 확장은 컴파일시에 되는데, .cljs 파일이 컴파일되는 JVM 상에서 .clj에서 정의된 함수들(매크로 포함)을 구동시킬 수 있기 때문입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;원래 매크로는 컴파일시에 컴퍼일러에 의해 호출되는, 형식(form)을 입력받아 확장된 형식(form)을 출력하는 특수 함수이죠. 뭐&amp;#8230;&amp;#8203;사용자에게 코드 형성의 자유를 주기 위해 컴파일러에 의해 호출되는 콜백 함수라고 할까요?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;결국 도우미 함수 `now`는 JVM상에서 실행되어야 합니다. 즉 도우미 함수는 매크로 확장시에 호출되어야 합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음과 같이 macro.clj 파일을 수정합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;macro.clj&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns macro)

(defn now []
  (System/currentTimeMillis))

(defmacro log [x]
  (let [t# (now)] ; &amp;lt;== now는 매크로 확장시에 호출된다.
  `(println &quot;[log&quot; ~t# &quot;]&quot; ~x)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위 소스에서는 &lt;code&gt;now&lt;/code&gt; 함수가 매크로 안에서 직접 호출되고, 그 결과값을 매크로의 결과에 포함합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다시 컴파일하면 정상적으로 성공합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ java -cp cljs.jar:. clojure.main build.clj
$ ls -al
total 57184
drwxr-xr-x  10 guruma  staff       340  9  2 02:25 .
drwxr-xr-x   6 guruma  staff       204  9  2 00:37 ..
-rw-r--r--   1 guruma  staff        99  9  2 01:43 build.clj
-rw-r--r--@  1 guruma  staff  25629199  9  2 01:24 cljs.jar
-rw-r--r--   1 guruma  staff   3622815  9  2 00:36 clojure.jar
-rw-r--r--   1 guruma  staff        86  9  2 00:46 core.clj
-rw-r--r--   1 guruma  staff        98  9  2 01:37 core.cljs
-rw-r--r--   1 guruma  staff       137  9  2 02:25 macro.clj
drwxr-xr-x  11 guruma  staff       374  9  2 02:25 out&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;out 폴더가 생성되는 것을 확인할 수 있습니다. out 폴더에 main.js 파일이 있으며 다음과 같이 내용입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_클로저스립트립트_코드_실행하기&quot;&gt;클로저스립트립트 코드 실행하기&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;main.js를 브라우저에서 실행해 보기 위해 index.html 파일을 작성합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
         &amp;lt;script type=&quot;text/javascript&quot; src=&quot;out/main.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음과 같이 index.html 파일을 브라우저로 실행합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ open index.html&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;브라우저의 콘솔창을 열어 확인해 보면 로그가 다음과 같이 프린트되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;[log 1504286749399 ]:  hello, world&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_공통_도우미_함수&quot;&gt;공통 도우미 함수&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;그런데 여기에 문제가 있습니다. &lt;code&gt;now&lt;/code&gt; 함수는 log 매크로가 컴파일시에 매크로 확장할 때 실행된다는 점입니다. 원래 의도는 log 매크로를 사용하는 코드가 런타임시에 실행될 때 &lt;code&gt;now&lt;/code&gt; 함수가 실행되어야 합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이를 위해서는 `now`함수는 .clj가 아닌 .cljs 파일에서 정의되어야 합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음과 같이 코드가 수정되어야 합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;util.cljs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns util)

(defn now []
  (js/Date.now))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;macro.clj&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns macro)

(defn now []
  (str &quot;js:&quot; (System/currentTimeMillis)))

(defmacro log [x]
  `(println &quot;[log&quot; (util/now) &quot;]&quot; ~x))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;core.cljs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns core
  (:require [util :refer [now]])
  (:require-macros [macro :refer [log]]))

(enable-console-print!)

(log &quot;hello, world&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;새로운 파일 util.cljs를 만들어 &lt;code&gt;now&lt;/code&gt; 함수를 클로저스크립트용으로 만들었습니다. 즉 자바스크립트의 &lt;code&gt;Date&lt;/code&gt; 오브젝트를 이용했습니다. 또한 macro.clj의 &lt;code&gt;now&lt;/code&gt; 함수와 구분할 수 있도록 &quot;js:&quot; 문자열을 앞에 덧붙였습니다. &lt;code&gt;log&lt;/code&gt; 매크로에서는 &lt;code&gt;(util/now)&lt;/code&gt; 형식(form)으로 수정했습니다. &lt;code&gt;util`이라는 이름공간을 지정해서 주어서 매크로 확장후 정확히 `util&lt;/code&gt; 이름공간의 `now`를 호출할 수 있도록 변경하였습니다. core.cljs에서는 `require`를 이용해서 util.cljs를 로딩합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;컴파일하고 실행해봅니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ java -cp cljs.jar:. clojure.main build.clj
$ open index.html&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;브라우저의 콘솔창에서 로그가 프린트되는 것을 확인합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;[log js:1504286749399 ]:  hello, world&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;확실히 이제 &lt;code&gt;now&lt;/code&gt; 함수가 브라우저상에서 호출되어 프린트되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_조건부_컴파일&quot;&gt;조건부 컴파일&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;일단 &lt;code&gt;now&lt;/code&gt; 함수의 실행 시간 문제는 해결되었지만, 다른 문제가 있습니다. 같은 이름과 기능을 하는 2개가 함수가 하나는 macro.clj에 다른 하나는 util.cljs 파일에 각각 따로 정의되어 있다는 문제입니다. 이렇게 되면 관리가 어려워지게 됩니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;사실 매크로를 작성하다보면 대부분은 공통으로 사용될 수 있지만 일부만 플랫폼에 따라 달라져야 하는 코드들이 분명 있습니다. 극히 일부만 플랫폼 의존 코드만 다르고 대부분의 코드들은 같은 매크로나 매크로 도우미 함수를 각각 서로 다른 파일에 관리해야 한다는 문제는 클로저스크립트 매크로 작성시에 큰 문제였습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;만약 이러한 코드들을 한 파일에서 정의하고 단지 일부 플랫폼 의존 코드만 따로 지정해서 조건부로 플랫폼에 따라 해당 플랫폼 코드만 컴파일할 수 있다면 정말 좋을 것입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이러한 목적을 위해 처음에는 .cljx를 사용했습니다. 이것은 라이닝언(Leiningen)이라는 빌드툴에서 사용되는 것이었는데, 플랫폼 의존 코드를 지정하면 라이닝언의 cljx 플러그인이 해당 플랫폼 코드만의 파일들로, 즉 .clj와 .cljs 파일로 나누어서 자동으로 생성해 주었습니다. 그 후 클로저스크립트 컴파일러로 이후 컴파일 과정이 이어나가는 방식이었습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;하지만 이것은 cljx라는 특정 도구를 사용해야 한다는 점에서 모두가 만족할 만한 해결책은 아니었습니다. 왜냐면 라이닝언 등의 해당 툴을 사용하지 못하는 경우도 있기 때문이었습니다. 결국 조건부 컴파일은 컴파일러 자체 내에 포함되어야 했고, 실제로 Clojure 1.7과 ClojureScript 0.0-3196부터 .cljc 파일에 대해 &lt;a href=&quot;https://clojure.org/guides/reader_conditionals&quot;&gt;Reader Conditionals&lt;/a&gt;이라는 기능으로 추가되었습니다. 자세한 내용은 링크를 참고하시기 바랍니다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;__cljc와_reader_conditionals&quot;&gt;.cljc와 Reader Conditionals&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이제 조건부 컴파일이 가능한 매크로를 .cljc 파일에 아래와 같이 다시 작성합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;macro.cljc&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns macro)

(defn now []
  #?(:clj (System.currentTimeMillis)
     :cljs (js/Date.now)))

(defmacro log [x]
  `(println &quot;log[&quot; (now) &quot;]: &quot; ~x))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;`#?`이 Reader Conditionals이라는 리더 매크로입니다. 컴파일러가 .clj, .cljs, .cljc 파일을 읽어들이면 제일 먼저 여러가지 리더 매크로의 처리를 하는데, .cljc인 경우에는 추가적으로 Reader Conditionals 처리가 더해집니다. 리더 매크로의 이러한 처리들로 만들어진 form들을 컴파일러가 그 이후 단계로 처리하게 되는 것입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;#?&lt;/code&gt; 리더 매크로 안에서 :clj로 지정된 형식(form)은 클로저 컴파일러가, :cljs로 지정된 형식(form)은 클로저스크립트 컴파일러가 사용할 수 있도록 처리됩니다.(이외에 :clr와 :default등도 있습니다)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이제 core.cljs에서 util.cljs을 로딩할 필요가 없습니다. core.cljs파일을 다음과 같이 수정합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;core.cljs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns core
  (:require-macros [macro :refer [log]]))

(enable-console-print!)

(log &quot;hello, world&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;컴파일하기 전에 기존 macro.clj를 macro.clj.bak을 바꿔줍니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ mv macro.clj macro.clj.bak&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;컴파일하고 브라우저 콘솔창에서 확인합니다&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ java -cp cljs.jar:. clojure.main build.clj
$ open index.html&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음과 같은 에러가 발생합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Uncaught ReferenceError: macro is not defined&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위에서 에러는 왜 발생하는 걸까요? 그것은 컴파일러가 매크로를 처리하는 방식때문입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;아시다시피 클로저는 코드들을 이름공간(NameSpace)라는 모듈 형태로 관리합니다. 모든 심볼들은 이름공간에 속해 있습니다. 이름공간은 런타임뿐 만 아니라 컴파일시에도 중요한 역할을 하는데 컴파일러는 매크로 이름공간과 일반 이름공간을 구분해서 관리합니다. 심볼들도 그에 따라 다르게 관리됩니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이러한 점을 염두에 두면서 클로저스크립트 컴파일러의 경우에 대해 생각해 봅시다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;core.cljs를 클로저스크립트가 컴파일할 때 처음 만나는 형식(form)이 ns 형식입니다. 여기서 require-macros를 만나서 macro.cljc를 로드합니다. 여기서 짚어야 할 것이 있는데, 컴파일러가 컴파일시에 로딩한다는 것입니다. 런타임에 로딩하는 코드로 번역되어서 런타임에 로딩하는 것이 아닙니다. 컴파일러가 컴파일을 위해 사용하려고 macro.cljc를 로딩하는 것입니다. 그런데 클로저스크립트 컴파일러는 JVM상에서 실행되고 있으므로 macro.cljc는 Reader Conditionals에 의해서 :clj 코드만 처리됩니다. 그리고 macro 이름공간은 매크로 이름공간으로 처리되면, &lt;code&gt;now&lt;/code&gt; 함수는 매크로 이름공간의 심볼이 됩니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;그 다음으로 클로저스크립트 컴파일러가 &lt;code&gt;log&lt;/code&gt; 매크로 형식을 만나는 경우를 보겠습니다. 컴파일러는 매크로를 만났으므로 매크로 확장을 하게 됩니다. 매크로를 확장하면서 now 심볼을 심볼 테이블에서 찾는데, 매크로 확장시이므로 매크로 이름공간에서 찾습니다. 거기에는 당연히 macro/now라는 심볼이 있으니, macro/now 심볼이 가리키는 Var, 즉 now 함수로 resolve합니다. 여기까지가 매크로 확장의 결과입니다. 매크로 확장을 끝난 후에 컴파일러는 그 결과 형식(form)을 다시 처리하려고 합니다. 그런데 macro/now는 찾을 수가 없습니다. 지금은 매크로 확장이 아니기 때문에 심볼을 일반 이름공간에서 찾아야 하는데, 일반 이름공간으로 macro.cljc를 로딩한 적이 없기 때문에, 컴파일러는 now를 찾을 수가 없는 것입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이러한 이유때문에 컴파일러가 macro/now라는 심볼은 선언되지 않았다는 경고(Use of undeclared Var macro/now)를 내는 것입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;결국 이 문제를 해결하려면 macro.cljc를 일반 이름공간으로 로딩해 주어야 합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다음과 같이 수정합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;core.cljs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns core
  (:require [macro :refer [log]])
  (:require-macros [macro :refer [log]]))

(enable-console-print!)

(log &quot;hello, world&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;require-macros가 클로저스크립트시에 매크로 파일을 로딩하는데&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;그런데 이 도우미 함수는 .clj에서 정의된 것이기 때문에 .cljs에서 사용할 수는 없습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;require-macros`는 컴파일할 때 실행됩니다. 컴파일러가 JVM상에서 실행되면서 `require-macros&lt;/code&gt; 함수를 실행하고, 이때 foo/macro.clj 파일을 로딩해서 파싱하면서, &lt;code&gt;foo.macro&lt;/code&gt; 이름공간(NameSpace)가 생성되고, 이 이름공간에 매크로 &lt;code&gt;log`와 도우미 함수 `now`가 등록됩니다. 컴파일러는 foo/core.cljs 에서 매크로 log 심볼을 만나게 되면, 매크로 확장을 하기위해, `foo.macro&lt;/code&gt; 이름공간에서 &lt;code&gt;log&lt;/code&gt; 매크로를 찾아서 확장을 하게 됩니다. 매크로 확장을 하면서 &lt;code&gt;now&lt;/code&gt; 함수도 &lt;code&gt;foo.macro&lt;/code&gt; 이름공간에서 찾아 실행하게 됩니다. 그러고나서  컴파일러는 &lt;code&gt;log&lt;/code&gt; 매크로가 리턴한 &lt;code&gt;(println &quot;log[&quot; (now) &quot;]: &quot; ~x)`를 본래 `log&lt;/code&gt; 매크로가 호출되던 자리에 넣게 됩니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;그런데 컴파일러가 도우미 함수의 심볼인 &lt;code&gt;now`를 만나게 되면, 매크로가 아니기 때문에, 보통의 일반적인 이름공간에서 심볼을 찾게 됩니다. 컴파일러는 일반 이름공간과 매크로 이름공간을 구분합니다. 컴파일러가 이미 `foo.core`와 `foo.macro&lt;/code&gt; 이름공간을 둘 다 로딩한 상태이긴 하지만, `now`는 매크로 이름공간에 있기 때문에, 컴파일러는 매크로가 아닌 `now`는 일반 이름공간인 `foo.core`에서만 찾습니다. 하지만 `foo.core`에는 `now`가 선언된 바가 없기 때문에 경고가 발생합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;macro.cljc&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns foo.macro)

(defn now []
  #?(:clj (System.currentTimeMillis())
     :cljs (js/Date.now)))

(defmacro log [x]
  `(println &quot;log[&quot; (now) &quot;]: &quot; ~x))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; foo/core.clj[]s

(ns foo.core
  (:require-macros [foo.macro :as [log]]))

(log x)

(now) ;; =&amp;gt; WARNING: Use of undeclared var&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 20 Sep 2017 00:00:00 +0900
</pubDate>
</item>
</channel>
</rss>
